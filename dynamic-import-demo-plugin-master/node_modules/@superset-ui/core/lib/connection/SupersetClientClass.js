"use strict";

exports.__esModule = true;
exports.default = void 0;

var _callApiAndParseWithTimeout = _interopRequireDefault(require("./callApi/callApiAndParseWithTimeout"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class SupersetClientClass {
  constructor({
    baseUrl = _constants.DEFAULT_BASE_URL,
    host,
    protocol,
    headers = {},
    fetchRetryOptions = {},
    mode = 'same-origin',
    timeout,
    credentials = undefined,
    csrfToken = undefined
  } = {}) {
    _defineProperty(this, "credentials", void 0);

    _defineProperty(this, "csrfToken", void 0);

    _defineProperty(this, "csrfPromise", void 0);

    _defineProperty(this, "fetchRetryOptions", void 0);

    _defineProperty(this, "baseUrl", void 0);

    _defineProperty(this, "protocol", void 0);

    _defineProperty(this, "host", void 0);

    _defineProperty(this, "headers", void 0);

    _defineProperty(this, "mode", void 0);

    _defineProperty(this, "timeout", void 0);

    const url = new URL(host || protocol ? (protocol || 'https:') + "//" + (host || 'localhost') : baseUrl, // baseUrl for API could also be relative, so we provide current location.href
    // as the base of baseUrl
    window.location.href);
    this.baseUrl = url.href.replace(/\/+$/, ''); // always strip trailing slash

    this.host = url.host;
    this.protocol = url.protocol;
    this.headers = _extends({}, headers);
    this.mode = mode;
    this.timeout = timeout;
    this.credentials = credentials;
    this.csrfToken = csrfToken;
    this.fetchRetryOptions = _extends({}, _constants.DEFAULT_FETCH_RETRY_OPTIONS, {}, fetchRetryOptions);

    if (typeof this.csrfToken === 'string') {
      this.headers = _extends({}, this.headers, {
        'X-CSRFToken': this.csrfToken
      });
      this.csrfPromise = Promise.resolve(this.csrfToken);
    }
  }

  async init(force = false) {
    if (this.isAuthenticated() && !force) {
      return this.csrfPromise;
    }

    return this.getCSRFToken();
  }

  async reAuthenticate() {
    return this.init(true);
  }

  isAuthenticated() {
    // if CSRF protection is disabled in the Superset app, the token may be an empty string
    return this.csrfToken !== null && this.csrfToken !== undefined;
  }

  async get(requestConfig) {
    return this.request(_extends({}, requestConfig, {
      method: 'GET'
    }));
  }

  async delete(requestConfig) {
    return this.request(_extends({}, requestConfig, {
      method: 'DELETE'
    }));
  }

  async put(requestConfig) {
    return this.request(_extends({}, requestConfig, {
      method: 'PUT'
    }));
  }

  async post(requestConfig) {
    return this.request(_extends({}, requestConfig, {
      method: 'POST'
    }));
  }

  async request(_ref) {
    let {
      credentials,
      mode,
      endpoint,
      host,
      url,
      headers,
      timeout
    } = _ref,
        rest = _objectWithoutPropertiesLoose(_ref, ["credentials", "mode", "endpoint", "host", "url", "headers", "timeout"]);

    await this.ensureAuth();
    return (0, _callApiAndParseWithTimeout.default)(_extends({}, rest, {
      credentials: credentials != null ? credentials : this.credentials,
      mode: mode != null ? mode : this.mode,
      url: this.getUrl({
        endpoint,
        host,
        url
      }),
      headers: _extends({}, this.headers, {}, headers),
      timeout: timeout != null ? timeout : this.timeout
    }));
  }

  async ensureAuth() {
    var _this$csrfPromise;

    return (_this$csrfPromise = this.csrfPromise) != null ? _this$csrfPromise : // eslint-disable-next-line prefer-promise-reject-errors
    Promise.reject({
      error: "SupersetClient has not been provided a CSRF token, ensure it is\n        initialized with `client.getCSRFToken()` or try logging in at\n        " + this.getUrl({
        endpoint: '/login'
      })
    });
  }

  async getCSRFToken() {
    this.csrfToken = undefined; // If we can request this resource successfully, it means that the user has
    // authenticated. If not we throw an error prompting to authenticate.

    this.csrfPromise = (0, _callApiAndParseWithTimeout.default)({
      credentials: this.credentials,
      headers: _extends({}, this.headers),
      method: 'GET',
      mode: this.mode,
      timeout: this.timeout,
      url: this.getUrl({
        endpoint: 'superset/csrf_token/'
      }),
      parseMethod: 'json'
    }).then(({
      json
    }) => {
      if (typeof json === 'object') {
        this.csrfToken = json.csrf_token;

        if (typeof this.csrfToken === 'string') {
          this.headers = _extends({}, this.headers, {
            'X-CSRFToken': this.csrfToken
          });
        }
      }

      if (this.isAuthenticated()) {
        return this.csrfToken;
      } // eslint-disable-next-line prefer-promise-reject-errors


      return Promise.reject({
        error: 'Failed to fetch CSRF token'
      });
    });
    return this.csrfPromise;
  }

  getUrl({
    host: inputHost,
    endpoint = '',
    url
  } = {}) {
    if (typeof url === 'string') return url;
    const host = inputHost != null ? inputHost : this.host;
    const cleanHost = host.slice(-1) === '/' ? host.slice(0, -1) : host; // no backslash

    return this.protocol + "//" + cleanHost + "/" + (endpoint[0] === '/' ? endpoint.slice(1) : endpoint);
  }

}

exports.default = SupersetClientClass;