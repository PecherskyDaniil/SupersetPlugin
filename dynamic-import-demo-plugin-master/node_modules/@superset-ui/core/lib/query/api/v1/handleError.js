"use strict";

exports.__esModule = true;
exports.default = handleError;

var _types = require("./types");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Handle API request errors, convert to consistent Superset API error.
 * @param error the catched error from SupersetClient.request(...)
 */
async function handleError(error) {
  // already a Sueprset error
  if (error instanceof _types.SupersetApiError) {
    throw error;
  } // string is the error message itself


  if (typeof error === 'string') {
    throw new _types.SupersetApiError({
      message: error
    });
  } // JS errors, normally happens before request was sent


  if (error instanceof Error) {
    throw new _types.SupersetApiError({
      message: error.message || 'Unknown Error',
      originalError: error
    });
  }

  let errorJson;
  let originalError;
  let errorMessage = 'Unknown Error';
  let status;
  let statusText; // catch HTTP errors

  if (error instanceof Response) {
    status = error.status;
    statusText = error.statusText;
    errorMessage = status + " " + statusText;

    try {
      errorJson = await error.json();
      originalError = errorJson;
    } catch (error_) {
      originalError = error;
    }
  } else if (error) {
    errorJson = error;
  } // when API returns 200 but operation fails (see Python API json_error_response(...))
  // or when frontend promise rejects with `{ error: ... }`


  if (errorJson && ('error' in errorJson || 'message' in errorJson || 'errors' in errorJson)) {
    let err;

    if ('errors' in errorJson) {
      var _errorJson$errors;

      err = ((_errorJson$errors = errorJson.errors) == null ? void 0 : _errorJson$errors[0]) || {};
    } else if (typeof errorJson.error === 'object') {
      err = errorJson.error;
    } else {
      err = errorJson;
    }

    errorMessage = err.message || err.error || err.error_type || errorMessage;
    throw new _types.SupersetApiError(_extends({
      status,
      statusText,
      message: errorMessage,
      originalError
    }, err));
  } // all unknown error


  throw new _types.SupersetApiError({
    message: errorMessage,
    originalError: error
  });
}