function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import callApi from './callApi';
import rejectAfterTimeout from './rejectAfterTimeout';
import parseResponse from './parseResponse';
export default async function callApiAndParseWithTimeout(_ref) {
  let {
    timeout,
    parseMethod
  } = _ref,
      rest = _objectWithoutPropertiesLoose(_ref, ["timeout", "parseMethod"]);

  const apiPromise = callApi(rest);
  const racedPromise = typeof timeout === 'number' && timeout > 0 ? Promise.race([apiPromise, rejectAfterTimeout(timeout)]) : apiPromise;
  return parseResponse(racedPromise, parseMethod);
}