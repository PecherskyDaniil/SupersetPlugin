function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function getDefaultLabel(metric) {
  if (metric.expressionType === 'SIMPLE') {
    return metric.aggregate + "(" + metric.column.columnName + ")";
  }

  return metric.sqlExpression;
}

export default function convertMetric(metric) {
  let formattedMetric;

  if (typeof metric === 'string') {
    formattedMetric = {
      label: metric
    };
  } else {
    var _metric$label;

    const label = (_metric$label = metric.label) != null ? _metric$label : getDefaultLabel(metric);
    formattedMetric = _extends({}, metric, {
      label
    });
  }

  return formattedMetric;
}