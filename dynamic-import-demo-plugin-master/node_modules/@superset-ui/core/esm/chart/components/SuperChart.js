import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import ErrorBoundary from 'react-error-boundary';
import { ParentSize } from '@vx/responsive';
import { createSelector } from 'reselect';
import { parseLength } from '../../dimension';
import SuperChartCore from './SuperChartCore';
import DefaultFallbackComponent from './FallbackComponent';
import ChartProps from '../models/ChartProps';
import NoResultsComponent from './NoResultsComponent';
const defaultProps = {
  FallbackComponent: DefaultFallbackComponent,
  height: 400,
  width: '100%'
};
export default class SuperChart extends React.PureComponent {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "core", void 0);

    _defineProperty(this, "createChartProps", ChartProps.createSelector());

    _defineProperty(this, "parseDimension", createSelector(({
      width
    }) => width, ({
      height
    }) => height, (width, height) => {
      // Parse them in case they are % or 'auto'
      const widthInfo = parseLength(width);
      const heightInfo = parseLength(height);
      const boxHeight = heightInfo.isDynamic ? heightInfo.multiplier * 100 + "%" : heightInfo.value;
      const boxWidth = widthInfo.isDynamic ? widthInfo.multiplier * 100 + "%" : widthInfo.value;
      const style = {
        height: boxHeight,
        width: boxWidth
      }; // bounding box will ensure that when one dimension is not dynamic
      // e.g. height = 300
      // the auto size will be bound to that value instead of being 100% by default
      // e.g. height: 300 instead of height: '100%'

      const BoundingBox = widthInfo.isDynamic && heightInfo.isDynamic && widthInfo.multiplier === 1 && heightInfo.multiplier === 1 ? React.Fragment : ({
        children
      }) => /*#__PURE__*/React.createElement("div", {
        style: style
      }, children);
      return {
        BoundingBox,
        heightInfo,
        widthInfo
      };
    }));

    _defineProperty(this, "setRef", core => {
      this.core = core;
    });
  }

  renderChart(width, height) {
    const _ref = this.props,
          {
      id,
      className,
      chartType,
      preTransformProps,
      overrideTransformProps,
      postTransformProps,
      onRenderSuccess,
      onRenderFailure,
      disableErrorBoundary,
      FallbackComponent: _FallbackComponent,
      onErrorBoundary,
      Wrapper,
      queryData,
      queriesData
    } = _ref,
          rest = _objectWithoutPropertiesLoose(_ref, ["id", "className", "chartType", "preTransformProps", "overrideTransformProps", "postTransformProps", "onRenderSuccess", "onRenderFailure", "disableErrorBoundary", "FallbackComponent", "onErrorBoundary", "Wrapper", "queryData", "queriesData"]);

    const chartProps = this.createChartProps(_extends({}, rest, {
      queryData,
      queriesData,
      height,
      width
    }));
    let chart; // Render the no results component if the query data is null or empty

    const noResultQuery = !queryData || !queryData.data || Array.isArray(queryData.data) && queryData.data.length === 0;
    const noResultQueries = !queriesData || queriesData.every(({
      data
    }) => !data || Array.isArray(data) && data.length === 0);

    if (noResultQuery && noResultQueries) {
      chart = /*#__PURE__*/React.createElement(NoResultsComponent, {
        id: id,
        className: className,
        height: height,
        width: width
      });
    } else {
      const chartWithoutWrapper = /*#__PURE__*/React.createElement(SuperChartCore, {
        ref: this.setRef,
        id: id,
        className: className,
        chartType: chartType,
        chartProps: chartProps,
        preTransformProps: preTransformProps,
        overrideTransformProps: overrideTransformProps,
        postTransformProps: postTransformProps,
        onRenderSuccess: onRenderSuccess,
        onRenderFailure: onRenderFailure
      });
      chart = Wrapper ? /*#__PURE__*/React.createElement(Wrapper, {
        width: width,
        height: height
      }, chartWithoutWrapper) : chartWithoutWrapper;
    } // Include the error boundary by default unless it is specifically disabled.


    return disableErrorBoundary === true ? chart : /*#__PURE__*/React.createElement(ErrorBoundary, {
      FallbackComponent: props => /*#__PURE__*/React.createElement(_FallbackComponent, _extends({
        width: width,
        height: height
      }, props)),
      onError: onErrorBoundary
    }, chart);
  }

  render() {
    const {
      heightInfo,
      widthInfo,
      BoundingBox
    } = this.parseDimension(this.props); // If any of the dimension is dynamic, get parent's dimension

    if (widthInfo.isDynamic || heightInfo.isDynamic) {
      const {
        debounceTime
      } = this.props;
      return /*#__PURE__*/React.createElement(BoundingBox, null, /*#__PURE__*/React.createElement(ParentSize, {
        debounceTime: debounceTime
      }, ({
        width,
        height
      }) => width > 0 && height > 0 && this.renderChart(widthInfo.isDynamic ? Math.floor(width) : widthInfo.value, heightInfo.isDynamic ? Math.floor(height) : heightInfo.value)));
    }

    return this.renderChart(widthInfo.value, heightInfo.value);
  }

}

_defineProperty(SuperChart, "propTypes", {
  disableErrorBoundary: _pt.bool,
  debounceTime: _pt.number,
  FallbackComponent: _pt.elementType,
  height: _pt.oneOfType([_pt.number, _pt.string]),
  width: _pt.oneOfType([_pt.number, _pt.string]),
  Wrapper: _pt.elementType
});

_defineProperty(SuperChart, "defaultProps", defaultProps);