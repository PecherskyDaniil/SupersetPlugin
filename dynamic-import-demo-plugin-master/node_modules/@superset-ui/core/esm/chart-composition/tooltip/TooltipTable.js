import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { PureComponent } from 'react';
const defaultProps = {
  className: '',
  data: []
};
const VALUE_CELL_STYLE = {
  paddingLeft: 8,
  textAlign: 'right'
};
export default class TooltipTable extends PureComponent {
  render() {
    const {
      className,
      data
    } = this.props;
    return /*#__PURE__*/React.createElement("table", {
      className: className
    }, /*#__PURE__*/React.createElement("tbody", null, data.map(({
      key,
      keyColumn,
      keyStyle,
      valueColumn,
      valueStyle
    }) => /*#__PURE__*/React.createElement("tr", {
      key: key
    }, /*#__PURE__*/React.createElement("td", {
      style: keyStyle
    }, keyColumn != null ? keyColumn : key), /*#__PURE__*/React.createElement("td", {
      style: valueStyle ? _extends({}, VALUE_CELL_STYLE, {}, valueStyle) : VALUE_CELL_STYLE
    }, valueColumn)))));
  }

}

_defineProperty(TooltipTable, "propTypes", {
  className: _pt.string,
  data: _pt.arrayOf(_pt.shape({
    key: _pt.oneOfType([_pt.string, _pt.number]).isRequired,
    keyColumn: _pt.node,
    valueColumn: _pt.node.isRequired
  })).isRequired
});

_defineProperty(TooltipTable, "defaultProps", defaultProps);