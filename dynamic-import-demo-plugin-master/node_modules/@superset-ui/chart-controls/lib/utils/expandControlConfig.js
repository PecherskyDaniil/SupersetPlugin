"use strict";

exports.__esModule = true;
exports.expandControlType = expandControlType;
exports.expandControlConfig = expandControlConfig;

var _react = _interopRequireDefault(require("react"));

var _sharedControls = _interopRequireDefault(require("../shared-controls"));

var _components = _interopRequireDefault(require("../shared-controls/components"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function expandControlType(controlType) {
  if (typeof controlType === 'string' && controlType in _components.default) {
    return _components.default[controlType];
  }

  return controlType;
}
/**
 * Expand a shorthand control config item to full config in the format of
 *   {
 *     name: ...,
 *     config: {
 *        type: ...,
 *        ...
 *     }
 *   }
 */


function expandControlConfig(control, controlOverrides = {}) {
  // one of the named shared controls
  if (typeof control === 'string' && control in _sharedControls.default) {
    const name = control;
    return {
      name,
      config: _extends({}, _sharedControls.default[name], {}, controlOverrides[name])
    };
  } // JSX/React element or NULL


  if (!control || typeof control === 'string' || _react.default.isValidElement(control)) {
    return control;
  } // already fully expanded control config


  if ('name' in control && 'config' in control) {
    return _extends({}, control, {
      config: _extends({}, control.config, {
        type: expandControlType(control.config.type)
      })
    });
  } // apply overrides with shared controls


  if ('override' in control && control.name in _sharedControls.default) {
    const {
      name,
      override
    } = control;
    return {
      name,
      config: _extends({}, _sharedControls.default[name], {}, override)
    };
  }

  return null;
}