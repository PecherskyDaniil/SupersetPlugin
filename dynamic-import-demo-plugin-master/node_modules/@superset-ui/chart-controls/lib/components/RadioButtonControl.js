"use strict";

exports.__esModule = true;
exports.default = RadioButtonControl;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _style = _interopRequireDefault(require("@superset-ui/style"));

var _InfoTooltipWithTrigger = require("./InfoTooltipWithTrigger");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject() {
  const data = _taggedTemplateLiteralLoose(["\n  .btn:focus {\n    outline: none;\n  }\n  .control-label + .btn-group {\n    margin-top: 1px;\n  }\n  .btn-group .btn.active {\n    background: ", ";\n    box-shadow: none;\n    font-weight: ", ";\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

const Styles = _style.default.div(_templateObject(), ({
  theme
}) => theme.colors.secondary.light5, ({
  theme
}) => theme.typography.weights.bold);

function RadioButtonControl({
  label: controlLabel,
  description,
  value: initialValue,
  hovered,
  options,
  onChange
}) {
  const currentValue = initialValue || options[0].value;
  const onClick = (0, _react.useCallback)(e => {
    onChange(e.currentTarget.value);
  }, [onChange]);
  return /*#__PURE__*/_react.default.createElement(Styles, null, controlLabel && /*#__PURE__*/_react.default.createElement("div", {
    className: "control-label"
  }, controlLabel, ' ', hovered && description && /*#__PURE__*/_react.default.createElement(_InfoTooltipWithTrigger.InfoTooltipWithTrigger, {
    tooltip: description,
    placement: "top"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "btn-group btn-group-sm"
  }, options.map(({
    label,
    value
  }, i) => /*#__PURE__*/_react.default.createElement("button", {
    key: value,
    type: "button",
    className: "btn btn-default " + (options[i].value === currentValue ? 'active' : ''),
    value: value,
    onClick: onClick
  }, label))));
}

RadioButtonControl.propTypes = {
  label: _propTypes.default.node,
  description: _propTypes.default.string,
  options: _propTypes.default.arrayOf(_propTypes.default.shape({
    label: _propTypes.default.string.isRequired,
    value: _propTypes.default.node.isRequired
  })).isRequired,
  hovered: _propTypes.default.bool,
  value: _propTypes.default.string,
  onChange: _propTypes.default.func.isRequired
};