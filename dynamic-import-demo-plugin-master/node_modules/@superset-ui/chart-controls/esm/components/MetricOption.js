"use strict";

exports.__esModule = true;
exports.MetricOption = MetricOption;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _style = _interopRequireDefault(require("@superset-ui/style"));

var _InfoTooltipWithTrigger = _interopRequireDefault(require("./InfoTooltipWithTrigger"));

var _ColumnTypeLabel = require("./ColumnTypeLabel");

var _CertifiedIconWithTooltip = _interopRequireDefault(require("./CertifiedIconWithTooltip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject() {
  const data = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  display: flex;\n\n  > svg {\n    margin-right: ", "px;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

const FlexRowContainer = _style.default.div(_templateObject(), ({
  theme
}) => theme.gridUnit);

function MetricOption({
  metric,
  openInNewWindow = false,
  showFormula = true,
  showType = false,
  url = ''
}) {
  const verbose = metric.verbose_name || metric.metric_name || metric.label;
  const link = url ? /*#__PURE__*/_react.default.createElement("a", {
    href: url,
    target: openInNewWindow ? '_blank' : ''
  }, verbose) : verbose;
  return /*#__PURE__*/_react.default.createElement(FlexRowContainer, {
    className: "metric-option"
  }, showType && /*#__PURE__*/_react.default.createElement(_ColumnTypeLabel.ColumnTypeLabel, {
    type: "expression"
  }), metric.is_certified && /*#__PURE__*/_react.default.createElement(_CertifiedIconWithTooltip.default, {
    metricName: metric.metric_name,
    certifiedBy: metric.certified_by,
    details: metric.certification_details
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: "option-label"
  }, link), metric.description && /*#__PURE__*/_react.default.createElement(_InfoTooltipWithTrigger.default, {
    className: "text-muted",
    icon: "info",
    tooltip: metric.description,
    label: "descr-" + metric.metric_name
  }), showFormula && /*#__PURE__*/_react.default.createElement(_InfoTooltipWithTrigger.default, {
    className: "text-muted",
    icon: "question-circle-o",
    tooltip: metric.expression,
    label: "expr-" + metric.metric_name
  }), metric.warning_text && /*#__PURE__*/_react.default.createElement(_InfoTooltipWithTrigger.default, {
    className: "text-danger",
    icon: "warning",
    tooltip: metric.warning_text,
    label: "warn-" + metric.metric_name
  }));
}

MetricOption.propTypes = {
  openInNewWindow: _propTypes.default.bool,
  showFormula: _propTypes.default.bool,
  showType: _propTypes.default.bool,
  url: _propTypes.default.string.isRequired
};