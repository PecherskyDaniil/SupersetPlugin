{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { t } from '@superset-ui/core';\nimport { expandControlConfig } from '@superset-ui/chart-controls';\nexport default {\n  controlPanelSections: [{\n    label: t('Query'),\n    expanded: true,\n    tabOverride: 'data',\n    controlSetRows: [[_objectSpread({}, expandControlConfig('groupby'))], [_objectSpread({}, expandControlConfig('metric'))]]\n  }, {\n    label: t('Options'),\n    expanded: true,\n    controlSetRows: [[{\n      name: 'font_size',\n      config: {\n        type: 'SelectControl',\n        label: t('Font Size'),\n        renderTrigger: true,\n        clearable: false,\n        default: 0.4,\n        // Values represent the percentage of space the \"Hello world!\" should take\n        options: [{\n          label: t('Tiny'),\n          value: 0.2\n        }, {\n          label: t('Small'),\n          value: 0.3\n        }, {\n          label: t('Normal'),\n          value: 0.4\n        }, {\n          label: t('Large'),\n          value: 0.5\n        }, {\n          label: t('Huge'),\n          value: 0.6\n        }]\n      }\n    }]]\n  }]\n};","map":{"version":3,"sources":["/home/daniil/plugin_fuck/custom plugins/dynamic-import-demo-plugin-master/src/controlPanel.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,CAAT,QAAkB,mBAAlB;AACA,SAAS,mBAAT,QAAoC,6BAApC;AAEA,eAAe;AACb,EAAA,oBAAoB,EAAE,CACpB;AACE,IAAA,KAAK,EAAE,CAAC,CAAC,OAAD,CADV;AAEE,IAAA,QAAQ,EAAE,IAFZ;AAGE,IAAA,WAAW,EAAE,MAHf;AAIE,IAAA,cAAc,EAAE,CACd,mBAAM,mBAAmB,CAAC,SAAD,CAAzB,EADc,EAEd,mBAAM,mBAAmB,CAAC,QAAD,CAAzB,EAFc;AAJlB,GADoB,EAUpB;AACE,IAAA,KAAK,EAAE,CAAC,CAAC,SAAD,CADV;AAEE,IAAA,QAAQ,EAAE,IAFZ;AAGE,IAAA,cAAc,EAAE,CACd,CACE;AACE,MAAA,IAAI,EAAE,WADR;AAEE,MAAA,MAAM,EAAE;AACN,QAAA,IAAI,EAAE,eADA;AAEN,QAAA,KAAK,EAAE,CAAC,CAAC,WAAD,CAFF;AAGN,QAAA,aAAa,EAAE,IAHT;AAIN,QAAA,SAAS,EAAE,KAJL;AAKN,QAAA,OAAO,EAAE,GALH;AAMN;AACA,QAAA,OAAO,EAAE,CACP;AACE,UAAA,KAAK,EAAE,CAAC,CAAC,MAAD,CADV;AAEE,UAAA,KAAK,EAAE;AAFT,SADO,EAKP;AACE,UAAA,KAAK,EAAE,CAAC,CAAC,OAAD,CADV;AAEE,UAAA,KAAK,EAAE;AAFT,SALO,EASP;AACE,UAAA,KAAK,EAAE,CAAC,CAAC,QAAD,CADV;AAEE,UAAA,KAAK,EAAE;AAFT,SATO,EAaP;AACE,UAAA,KAAK,EAAE,CAAC,CAAC,OAAD,CADV;AAEE,UAAA,KAAK,EAAE;AAFT,SAbO,EAiBP;AACE,UAAA,KAAK,EAAE,CAAC,CAAC,MAAD,CADV;AAEE,UAAA,KAAK,EAAE;AAFT,SAjBO;AAPH;AAFV,KADF,CADc;AAHlB,GAVoB;AADT,CAAf","sourcesContent":["import { t } from '@superset-ui/core';\nimport { expandControlConfig } from '@superset-ui/chart-controls';\n\nexport default {\n  controlPanelSections: [\n    {\n      label: t('Query'),\n      expanded: true,\n      tabOverride: 'data',\n      controlSetRows: [\n        [{ ...expandControlConfig('groupby') }],\n        [{ ...expandControlConfig('metric') }],\n      ],\n    },\n    {\n      label: t('Options'),\n      expanded: true,\n      controlSetRows: [\n        [\n          {\n            name: 'font_size',\n            config: {\n              type: 'SelectControl',\n              label: t('Font Size'),\n              renderTrigger: true,\n              clearable: false,\n              default: 0.4,\n              // Values represent the percentage of space the \"Hello world!\" should take\n              options: [\n                {\n                  label: t('Tiny'),\n                  value: 0.2,\n                },\n                {\n                  label: t('Small'),\n                  value: 0.3,\n                },\n                {\n                  label: t('Normal'),\n                  value: 0.4,\n                },\n                {\n                  label: t('Large'),\n                  value: 0.5,\n                },\n                {\n                  label: t('Huge'),\n                  value: 0.6,\n                },\n              ],\n            },\n          },\n        ],\n      ],\n    },\n  ],\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}