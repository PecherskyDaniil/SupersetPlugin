{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { ChartMetadata, ChartPlugin, t } from '@superset-ui/core';\nimport controlPanel from './controlPanel';\nimport transformProps from './transformProps';\nimport buildQuery from './buildQuery';\nimport thumbnail from './images/thumbnail.png';\nimport Chart from './Vis';\nvar metadata = new ChartMetadata({\n  description: 'A chart plugin for Superset demonstrating current best practices',\n  name: t('Hello World'),\n  thumbnail: thumbnail,\n  useLegacyApi: false\n});\n\nvar HelloWorldChartPlugin = /*#__PURE__*/function (_ChartPlugin) {\n  _inherits(HelloWorldChartPlugin, _ChartPlugin);\n\n  var _super = _createSuper(HelloWorldChartPlugin);\n\n  function HelloWorldChartPlugin() {\n    _classCallCheck(this, HelloWorldChartPlugin);\n\n    return _super.call(this, {\n      buildQuery: buildQuery,\n      Chart: Chart,\n      metadata: metadata,\n      transformProps: transformProps,\n      controlPanel: controlPanel\n    });\n  }\n\n  return HelloWorldChartPlugin;\n}(ChartPlugin);\n\nexport { HelloWorldChartPlugin as default };","map":{"version":3,"sources":["/home/daniil/plugin_fuck/custom plugins/dynamic-import-demo-plugin-master/src/chart.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAS,aAAT,EAAwB,WAAxB,EAAqC,CAArC,QAA8C,mBAA9C;AACA,OAAO,YAAP,MAAyB,gBAAzB;AACA,OAAO,cAAP,MAA2B,kBAA3B;AACA,OAAO,UAAP,MAAuB,cAAvB;AACA,OAAO,SAAP,MAAsB,wBAAtB;AACA,OAAO,KAAP,MAAkB,OAAlB;AAEA,IAAM,QAAQ,GAAG,IAAI,aAAJ,CAAkB;AACjC,EAAA,WAAW,EACT,kEAF+B;AAGjC,EAAA,IAAI,EAAE,CAAC,CAAC,aAAD,CAH0B;AAIjC,EAAA,SAAS,EAAT,SAJiC;AAKjC,EAAA,YAAY,EAAE;AALmB,CAAlB,CAAjB;;IAQqB,qB;;;;;AACnB,mCAAA;AAAA;;AAAA,6BACQ;AACJ,MAAA,UAAU,EAAV,UADI;AAEJ,MAAA,KAAK,EAAL,KAFI;AAGJ,MAAA,QAAQ,EAAR,QAHI;AAIJ,MAAA,cAAc,EAAd,cAJI;AAKJ,MAAA,YAAY,EAAZ;AALI,KADR;AAQC;;;EATgD,W;;SAA9B,qB","sourcesContent":["import { ChartMetadata, ChartPlugin, t } from '@superset-ui/core';\nimport controlPanel from './controlPanel';\nimport transformProps from './transformProps';\nimport buildQuery from './buildQuery';\nimport thumbnail from './images/thumbnail.png';\nimport Chart from './Vis';\n\nconst metadata = new ChartMetadata({\n  description:\n    'A chart plugin for Superset demonstrating current best practices',\n  name: t('Hello World'),\n  thumbnail,\n  useLegacyApi: false,\n});\n\nexport default class HelloWorldChartPlugin extends ChartPlugin {\n  constructor() {\n    super({\n      buildQuery,\n      Chart,\n      metadata,\n      transformProps,\n      controlPanel,\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}